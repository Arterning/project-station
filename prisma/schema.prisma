// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 项目状态枚举
enum ProjectStatus {
  IDEA          // 想法
  VALIDATING    // 验证中
  IN_PROGRESS   // 实行中
  MVP_LAUNCHED  // MVP发布
  RUNNING       // 运行中
  SUCCESS       // 成功
  FAILED        // 失败
}

// 收入模式枚举
enum RevenueModel {
  SUBSCRIPTION    // 订阅制
  ONE_TIME        // 一次性付费
  FREEMIUM        // 免费增值
  ADVERTISING     // 广告
  COMMISSION      // 佣金
  OTHER           // 其他
}

// 用户模型
model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique // Clerk 用户ID
  email     String    @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  projects  Project[]
  keywords  Keyword[]
  bookmarks Bookmark[]

  @@index([clerkId])
  @@map("users")
}

// 项目模型
model Project {
  id                String        @id @default(cuid())
  name              String
  idea              String        @db.Text // 项目详细描述
  status            ProjectStatus @default(IDEA)
  type              String        // 项目类型
  startDate         DateTime?     // 项目开始时间
  targetMarket      String?       @db.Text // 目标市场/用户群体
  revenueModel      RevenueModel? // 收入模式
  budget            String?       // 预算范围
  expectedDuration  String?       // 预期时长
  tags              String[]      // 标签数组

  // 验证相关
  validationKeywords String[]      // 验证关键词
  validationScore    Float?        // 可行性评分
  validationSummary  String?       @db.Text // AI生成的验证总结

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  redditPosts RedditPost[]
  keywords    ProjectKeyword[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("projects")
}

// Reddit 帖子模型（用于验证）
model RedditPost {
  id          String   @id @default(cuid())
  redditId    String   @unique // Reddit帖子ID
  title       String
  content     String   @db.Text
  author      String
  subreddit   String
  score       Int      // 点赞数
  numComments Int      // 评论数
  url         String
  createdAt   DateTime // Reddit帖子创建时间
  fetchedAt   DateTime @default(now()) // 抓取时间

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([subreddit])
  @@map("reddit_posts")
}

// 关键词模型
model Keyword {
  id          String   @id @default(cuid())
  name        String   // 关键词名称，如 "image generator"
  popularity  Int      @default(0) // 热度评分 0-100
  description String?  @db.Text // 关键词描述
  longTails   String[] // 长尾词数组，如 ["AI image generator", "free image generator"]

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  projects ProjectKeyword[]

  @@index([userId])
  @@index([name])
  @@map("keywords")
}

// 关键词和项目的多对多关系表
model ProjectKeyword {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  keywordId String
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([projectId, keywordId])
  @@index([projectId])
  @@index([keywordId])
  @@map("project_keywords")
}

// 风向标数据源类型枚举
enum TrendSourceType {
  HACKER_NEWS    // Hacker News
  REDDIT         // Reddit
  PRODUCT_HUNT   // Product Hunt
  GITHUB         // GitHub Trending
  OTHER          // 其他自定义源
}

// 风向标数据源配置
model TrendSource {
  id          String          @id @default(cuid())
  name        String          // 数据源名称，如 "Hacker News"
  type        TrendSourceType // 数据源类型
  rssUrl      String?         // RSS feed URL（如果适用）
  apiUrl      String?         // API URL（如果适用）
  isActive    Boolean         @default(true) // 是否启用
  refreshedAt DateTime?       // 最后刷新时间

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trends Trend[]

  @@index([type])
  @@index([isActive])
  @@map("trend_sources")
}

// 风向标帖子模型
model Trend {
  id           String   @id @default(cuid())
  title        String   // 帖子标题
  url          String   // 帖子原始链接
  publishedAt  DateTime // 帖子发布时间
  score        Int      @default(0) // 评分/点赞数
  commentCount Int      @default(0) // 评论数
  hotScore     Float    // 综合热度得分（用于排序）

  sourceId String
  source   TrendSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sourceId])
  @@index([hotScore])
  @@index([publishedAt])
  @@map("trends")
}

// 网站书签分类枚举
enum BookmarkCategory {
  NEWS              // 新闻资讯 (Hacker News, Reddit, Product Hunt)
  MARKETING         // 营销工具 (Google Ads, Google Analytics, Google Search Console)
  SEARCH            // 搜索工具 (Google, Google Trends)
  MONETIZATION      // 变现工具 (Google AdSense)
  DEVELOPMENT       // 开发工具
  DESIGN            // 设计工具
  ANALYTICS         // 分析工具
  PRODUCTIVITY      // 生产力工具
  SOCIAL_MEDIA      // 社交媒体
  CUSTOM            // 自定义分类
}

// 创业导航书签模型
model Bookmark {
  id          String           @id @default(cuid())
  name        String           // 网站名称
  url         String           // 网站URL
  description String?          @db.Text // 网站描述
  category    BookmarkCategory // 分类
  favicon     String?          // favicon URL（可自动获取或手动设置）
  isDefault   Boolean          @default(false) // 是否为系统默认书签
  order       Int              @default(0) // 排序顺序

  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
  @@index([isDefault])
  @@map("bookmarks")
}
